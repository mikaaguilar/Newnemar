
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;



/**
 *
 * @author CSC-MITS
 */
public class Purchase extends javax.swing.JFrame {
public Connection con;
public PreparedStatement st, st1, st2,sta;
public ResultSet rs, rs1, rs2; 
public static String z;
public String tr;
public boolean g = false;
public int hisid;
public String pu,Categ,cItem, it, hm, frBr, frDp, frOw, frSql, frId;
public String br,dp,ow,pr,mb,rm,hd,up,kb,ms,re,mn,ty,na,un,pw,cn,qt;
public String purName,item,cName,word, name, devname = null;
public int id,tempid,cnt,dID;
    public String sql,sql1; 
    public String utype,Parts1;

    
    public Purchase() {
        initComponents();
        opening();
            
    ButtonGroup bg1 = new ButtonGroup( );

    bg1.add(jRadioButton1);
    bg1.add(jRadioButton2);
    bg1.add(jRadioButton3);
    
     if(jRadioButton1.isSelected()){
    unitSelect.setVisible(true);
    jLabel18a.setVisible(true);
    String se = unitSelect.getSelectedItem().toString();
    if("Unit".equals(se)){
    Unit.setVisible(true);
    Others.setVisible(false);
    CCTV.setVisible(false);
    Printer.setVisible(false);
    }
    else {Unit.setVisible(false);
    Others.setVisible(true);
    CCTV.setVisible(false);
    Printer.setVisible(false);}
    }
    else if(jRadioButton2.isSelected()){
    unitSelect.setVisible(false);
    jLabel18a.setVisible(false);
    Unit.setVisible(false);
    Others.setVisible(false);
    CCTV.setVisible(true);
    Printer.setVisible(false);
    }
    else if(jRadioButton3.isSelected()){
    unitSelect.setVisible(false);
    jLabel18a.setVisible(false);
    Unit.setVisible(false);
    Others.setVisible(false);
    CCTV.setVisible(false);
    Printer.setVisible(true);
    }
    }
    public void opening(){
     jRadioButton1.setEnabled(true);
     jRadioButton2.setEnabled(true);
     jRadioButton3.setEnabled(true);
     jRadioButton1.setSelected(true);
     unitKey2.setText("");
      showPurUnit();
       try {
con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;         
Statement st=con.createStatement();         
sql = "TRUNCATE TABLE dbo.Cart";         
st.execute(sql);
sql1 = "TRUNCATE TABLE dbo.invTEMP";         
st.execute(sql1);
      }
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 }
       showCart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Adding = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Request = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        reqBranch = new javax.swing.JComboBox<>();
        jLabel1a = new javax.swing.JLabel();
        jLabel8a = new javax.swing.JLabel();
        unitDept = new javax.swing.JComboBox<>();
        jPanel20 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        Unit = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        unitTbl = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        unitPro = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        unitRam = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        unitHar = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        unitMot = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        unitUPS = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        unitMon = new javax.swing.JTextField();
        unitSearch = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        unitKey = new javax.swing.JTextField();
        unitAdd = new javax.swing.JButton();
        jLabel107 = new javax.swing.JLabel();
        unitMou = new javax.swing.JTextField();
        Others = new javax.swing.JPanel();
        othersSearch = new javax.swing.JTextField();
        jScrollPane11 = new javax.swing.JScrollPane();
        othersTbl = new javax.swing.JTable();
        jLabel41 = new javax.swing.JLabel();
        othersField = new javax.swing.JTextField();
        othersAdd = new javax.swing.JButton();
        CCTV = new javax.swing.JPanel();
        cctvSearch = new javax.swing.JTextField();
        jScrollPane12 = new javax.swing.JScrollPane();
        cctvTbl = new javax.swing.JTable();
        jLabel52 = new javax.swing.JLabel();
        cctvField = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        cctvQty = new javax.swing.JSpinner();
        cctvAdd = new javax.swing.JButton();
        jLabel111 = new javax.swing.JLabel();
        jLabel182 = new javax.swing.JLabel();
        una = new javax.swing.JTextField();
        pass = new javax.swing.JTextField();
        Printer = new javax.swing.JPanel();
        printerSearch = new javax.swing.JTextField();
        jScrollPane19 = new javax.swing.JScrollPane();
        printerTbl = new javax.swing.JTable();
        jLabel54a = new javax.swing.JLabel();
        printerField = new javax.swing.JTextField();
        printerAdd = new javax.swing.JButton();
        jLabel18a = new javax.swing.JLabel();
        unitSelect = new javax.swing.JComboBox<>();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jPanel21 = new javax.swing.JPanel();
        jLabel16a = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        Cart = new javax.swing.JTable();
        reqRemove = new javax.swing.JButton();
        reqCheckout = new javax.swing.JButton();
        reqCancel = new javax.swing.JButton();
        unitKey2 = new javax.swing.JTextField();
        jLabel62 = new javax.swing.JLabel();
        jLabel8a1 = new javax.swing.JLabel();
        reqOwn = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Adding.setBackground(new java.awt.Color(255, 255, 255));
        Adding.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102)));

        jPanel2.setLayout(new java.awt.CardLayout());

        Request.setBackground(new java.awt.Color(255, 255, 255));
        Request.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel4.setBackground(new java.awt.Color(0, 0, 102));
        jPanel4.setForeground(new java.awt.Color(0, 0, 51));

        jLabel2.setBackground(new java.awt.Color(0, 51, 255));
        jLabel2.setFont(new java.awt.Font("Leelawadee UI", 0, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Request Device");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel2)
                .addContainerGap(226, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 19, Short.MAX_VALUE))
        );

        reqBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqBranchActionPerformed(evt);
            }
        });

        jLabel1a.setText("Branch:");

        jLabel8a.setText("Department:");

        jPanel20.setBackground(new java.awt.Color(204, 204, 204));

        jPanel19.setLayout(new java.awt.CardLayout());

        Unit.setBackground(new java.awt.Color(204, 204, 204));

        unitTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        unitTbl.setSelectionBackground(new java.awt.Color(255, 102, 0));
        unitTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unitTblMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(unitTbl);

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(51, 51, 51));
        jLabel21.setText("Processor:");

        unitPro.setForeground(new java.awt.Color(102, 102, 102));
        unitPro.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel35.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(51, 51, 51));
        jLabel35.setText("RAM:");

        unitRam.setForeground(new java.awt.Color(102, 102, 102));
        unitRam.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel33.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(51, 51, 51));
        jLabel33.setText("Hard Drive:");

        unitHar.setForeground(new java.awt.Color(102, 102, 102));
        unitHar.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(51, 51, 51));
        jLabel36.setText("Motherboard:");

        unitMot.setForeground(new java.awt.Color(102, 102, 102));
        unitMot.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel39.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(51, 51, 51));
        jLabel39.setText("UPS:");

        unitUPS.setForeground(new java.awt.Color(102, 102, 102));
        unitUPS.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel50.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel50.setForeground(new java.awt.Color(51, 51, 51));
        jLabel50.setText("Monitor:");

        unitMon.setForeground(new java.awt.Color(102, 102, 102));
        unitMon.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel45.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(51, 51, 51));
        jLabel45.setText("Mouse:");

        unitKey.setForeground(new java.awt.Color(102, 102, 102));
        unitKey.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        unitAdd.setBackground(new java.awt.Color(255, 255, 255));
        unitAdd.setText("Add to Cart");
        unitAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitAddActionPerformed(evt);
            }
        });

        jLabel107.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel107.setForeground(new java.awt.Color(51, 51, 51));
        jLabel107.setText("Keyboard:");

        unitMou.setForeground(new java.awt.Color(102, 102, 102));
        unitMou.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout UnitLayout = new javax.swing.GroupLayout(Unit);
        Unit.setLayout(UnitLayout);
        UnitLayout.setHorizontalGroup(
            UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UnitLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 990, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(UnitLayout.createSequentialGroup()
                        .addGroup(UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(UnitLayout.createSequentialGroup()
                                    .addComponent(jLabel36)
                                    .addGap(7, 7, 7)
                                    .addComponent(unitMot, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(UnitLayout.createSequentialGroup()
                                    .addGroup(UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel21)
                                        .addComponent(jLabel33))
                                    .addGap(24, 24, 24)
                                    .addGroup(UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(unitPro, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                                        .addComponent(unitHar)))
                                .addComponent(unitMon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(unitUPS, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel50)
                            .addComponent(jLabel39)
                            .addComponent(unitSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UnitLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(unitAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UnitLayout.createSequentialGroup()
                                .addComponent(jLabel35)
                                .addGap(44, 44, 44)
                                .addComponent(unitRam))
                            .addGroup(UnitLayout.createSequentialGroup()
                                .addComponent(jLabel107)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(unitKey))
                            .addGroup(UnitLayout.createSequentialGroup()
                                .addComponent(jLabel45)
                                .addGap(29, 29, 29)
                                .addComponent(unitMou)))))
                .addGap(46, 46, 46))
        );
        UnitLayout.setVerticalGroup(
            UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UnitLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(unitSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitPro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel35)
                    .addComponent(unitRam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UnitLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(unitMot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel107)
                        .addComponent(unitKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16)
                .addGroup(UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(unitHar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel45)
                    .addComponent(unitMou, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UnitLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel50)
                            .addComponent(unitMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(UnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel39)
                            .addComponent(unitUPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(UnitLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(unitAdd)))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        jPanel19.add(Unit, "card2");

        Others.setBackground(new java.awt.Color(204, 204, 204));

        othersTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        othersTbl.setSelectionBackground(new java.awt.Color(255, 102, 0));
        othersTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                othersTblMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(othersTbl);

        jLabel41.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(51, 51, 51));
        jLabel41.setText("Device:");

        othersField.setForeground(new java.awt.Color(102, 102, 102));
        othersField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        othersAdd.setBackground(new java.awt.Color(255, 255, 255));
        othersAdd.setText("Add to Cart");
        othersAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                othersAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OthersLayout = new javax.swing.GroupLayout(Others);
        Others.setLayout(OthersLayout);
        OthersLayout.setHorizontalGroup(
            OthersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OthersLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(OthersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OthersLayout.createSequentialGroup()
                        .addComponent(othersSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(779, 779, 779))
                    .addGroup(OthersLayout.createSequentialGroup()
                        .addGroup(OthersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane11)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, OthersLayout.createSequentialGroup()
                                .addComponent(jLabel41)
                                .addGap(24, 24, 24)
                                .addComponent(othersField, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 363, Short.MAX_VALUE)
                                .addComponent(othersAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(38, 38, 38))))
        );
        OthersLayout.setVerticalGroup(
            OthersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OthersLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(othersSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(OthersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(othersField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41)
                    .addComponent(othersAdd))
                .addGap(69, 69, 69))
        );

        jPanel19.add(Others, "card3");

        CCTV.setBackground(new java.awt.Color(204, 204, 204));

        cctvTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        cctvTbl.setSelectionBackground(new java.awt.Color(255, 102, 0));
        cctvTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cctvTblMouseClicked(evt);
            }
        });
        jScrollPane12.setViewportView(cctvTbl);

        jLabel52.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel52.setForeground(new java.awt.Color(51, 51, 51));
        jLabel52.setText("CCTV:");

        cctvField.setForeground(new java.awt.Color(102, 102, 102));
        cctvField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel53.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel53.setText("Camera Quantity:");

        cctvQty.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cctvQty.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        cctvAdd.setBackground(new java.awt.Color(255, 255, 255));
        cctvAdd.setText("Add to Cart");
        cctvAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cctvAddActionPerformed(evt);
            }
        });

        jLabel111.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel111.setText("Username:");

        jLabel182.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel182.setText("Password:");

        javax.swing.GroupLayout CCTVLayout = new javax.swing.GroupLayout(CCTV);
        CCTV.setLayout(CCTVLayout);
        CCTVLayout.setHorizontalGroup(
            CCTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CCTVLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(CCTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CCTVLayout.createSequentialGroup()
                        .addComponent(cctvSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(779, 782, Short.MAX_VALUE))
                    .addGroup(CCTVLayout.createSequentialGroup()
                        .addGroup(CCTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane12)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, CCTVLayout.createSequentialGroup()
                                .addGroup(CCTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CCTVLayout.createSequentialGroup()
                                        .addGroup(CCTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel111)
                                            .addComponent(jLabel52))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(CCTVLayout.createSequentialGroup()
                                        .addComponent(jLabel182)
                                        .addGap(10, 10, 10)))
                                .addGroup(CCTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(pass, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                                    .addComponent(cctvField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                                    .addComponent(una, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                                .addComponent(jLabel53)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cctvQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(cctvAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(38, 38, 38))))
        );
        CCTVLayout.setVerticalGroup(
            CCTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CCTVLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(cctvSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(CCTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cctvField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel52)
                    .addComponent(jLabel53)
                    .addComponent(cctvQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cctvAdd))
                .addGap(18, 18, 18)
                .addGroup(CCTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel111)
                    .addComponent(una, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(CCTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel182)
                    .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel19.add(CCTV, "card4");

        Printer.setBackground(new java.awt.Color(204, 204, 204));

        printerTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        printerTbl.setSelectionBackground(new java.awt.Color(255, 102, 0));
        printerTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printerTblMouseClicked(evt);
            }
        });
        jScrollPane19.setViewportView(printerTbl);

        jLabel54a.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel54a.setForeground(new java.awt.Color(51, 51, 51));
        jLabel54a.setText("Printer:");

        printerField.setForeground(new java.awt.Color(102, 102, 102));
        printerField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        printerAdd.setBackground(new java.awt.Color(255, 255, 255));
        printerAdd.setText("Add to Request");
        printerAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printerAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PrinterLayout = new javax.swing.GroupLayout(Printer);
        Printer.setLayout(PrinterLayout);
        PrinterLayout.setHorizontalGroup(
            PrinterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PrinterLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(PrinterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PrinterLayout.createSequentialGroup()
                        .addComponent(printerSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(779, 779, 779))
                    .addGroup(PrinterLayout.createSequentialGroup()
                        .addGroup(PrinterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane19)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PrinterLayout.createSequentialGroup()
                                .addComponent(jLabel54a)
                                .addGap(24, 24, 24)
                                .addComponent(printerField, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 363, Short.MAX_VALUE)
                                .addComponent(printerAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(38, 38, 38))))
        );
        PrinterLayout.setVerticalGroup(
            PrinterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PrinterLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(printerSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(PrinterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel54a)
                    .addComponent(printerAdd))
                .addGap(69, 69, 69))
        );

        jPanel19.add(Printer, "card5");

        jLabel18a.setText("Select:");

        unitSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unit", "Processor", "Motherboard", "Harddrive", "Monitor", "RAM", "UPS", "Keyboard", "Mouse", " " }));
        unitSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel18a)
                .addGap(61, 61, 61)
                .addComponent(unitSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(661, Short.MAX_VALUE))
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, 1076, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(unitSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18a))
                .addContainerGap(530, Short.MAX_VALUE))
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                    .addGap(0, 58, Short.MAX_VALUE)
                    .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jRadioButton1.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Computer");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButton2.setText("CCTV");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jRadioButton3.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButton3.setText("Printer");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jLabel16a.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel16a.setText("Devices to Request");

        Cart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Cart.setSelectionBackground(new java.awt.Color(255, 102, 0));
        jScrollPane10.setViewportView(Cart);

        reqRemove.setText("Remove");
        reqRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqRemoveActionPerformed(evt);
            }
        });

        reqCheckout.setText("Check-out");
        reqCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqCheckoutActionPerformed(evt);
            }
        });

        reqCancel.setText("Cancel");
        reqCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqCancelActionPerformed(evt);
            }
        });

        unitKey2.setForeground(new java.awt.Color(102, 102, 102));
        unitKey2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel62.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel62.setForeground(new java.awt.Color(51, 51, 51));
        jLabel62.setText("Total Price:");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addComponent(jLabel16a)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(unitKey2)
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addComponent(jLabel62)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(reqCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(reqRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(reqCheckout, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .addComponent(jLabel16a)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addComponent(jLabel62)
                        .addGap(7, 7, 7)
                        .addComponent(unitKey2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addComponent(reqCheckout)
                        .addGap(7, 7, 7)
                        .addComponent(reqRemove)
                        .addGap(11, 11, 11)
                        .addComponent(reqCancel)))
                .addGap(57, 57, 57))
        );

        jLabel8a1.setText("Owner:");

        jCheckBox1.setText("FOR IT RESERVE");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RequestLayout = new javax.swing.GroupLayout(Request);
        Request.setLayout(RequestLayout);
        RequestLayout.setHorizontalGroup(
            RequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RequestLayout.createSequentialGroup()
                .addGroup(RequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RequestLayout.createSequentialGroup()
                        .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(RequestLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(RequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(RequestLayout.createSequentialGroup()
                                .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(RequestLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(RequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(RequestLayout.createSequentialGroup()
                                        .addComponent(jLabel8a1)
                                        .addGap(18, 18, 18)
                                        .addComponent(reqOwn, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jCheckBox1))
                                    .addGroup(RequestLayout.createSequentialGroup()
                                        .addComponent(jLabel1a)
                                        .addGap(18, 18, 18)
                                        .addComponent(reqBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(jLabel8a)
                                        .addGap(18, 18, 18)
                                        .addComponent(unitDept, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        RequestLayout.setVerticalGroup(
            RequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RequestLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1a)
                    .addComponent(reqBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8a)
                    .addComponent(unitDept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(RequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reqOwn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8a1)
                    .addComponent(jCheckBox1))
                .addGap(18, 18, 18)
                .addGroup(RequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3))
                .addGap(11, 11, 11)
                .addGroup(RequestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel2.add(Request, "card2");

        javax.swing.GroupLayout AddingLayout = new javax.swing.GroupLayout(Adding);
        Adding.setLayout(AddingLayout);
        AddingLayout.setHorizontalGroup(
            AddingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddingLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1502, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        AddingLayout.setVerticalGroup(
            AddingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddingLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 804, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Adding, javax.swing.GroupLayout.PREFERRED_SIZE, 1523, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Adding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reqBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqBranchActionPerformed
        showDepPur();
    }//GEN-LAST:event_reqBranchActionPerformed

    private void unitTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unitTblMouseClicked
        pcSetpr();
    }//GEN-LAST:event_unitTblMouseClicked

    private void unitAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitAddActionPerformed
        cartAdd();
    }//GEN-LAST:event_unitAddActionPerformed

    private void othersTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_othersTblMouseClicked
        otSetpr();
    }//GEN-LAST:event_othersTblMouseClicked

    private void othersAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_othersAddActionPerformed
        cartAdd();
    }//GEN-LAST:event_othersAddActionPerformed

    private void cctvTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cctvTblMouseClicked
        ccSetpr();
    }//GEN-LAST:event_cctvTblMouseClicked

    private void cctvAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cctvAddActionPerformed
        cartAdd();
    }//GEN-LAST:event_cctvAddActionPerformed

    private void printerTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printerTblMouseClicked
        prSetpr();
    }//GEN-LAST:event_printerTblMouseClicked

    private void printerAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printerAddActionPerformed
        cartAdd();
    }//GEN-LAST:event_printerAddActionPerformed

    private void unitSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitSelectActionPerformed
        String se = unitSelect.getSelectedItem().toString();
        pcSortpr();
        if(se.equals("Unit")){
            Unit.setVisible(true);
            Others.setVisible(false);
            CCTV.setVisible(false);
            Printer.setVisible(false);

        }
        else {Unit.setVisible(false);
            Others.setVisible(true);
            CCTV.setVisible(false);
            Printer.setVisible(false);
        }
    }//GEN-LAST:event_unitSelectActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        unitSelect.setSelectedIndex(0);
        unitSelect.setVisible(true);
        jLabel18a.setVisible(true);
        Unit.setVisible(true);
        Others.setVisible(false);
        CCTV.setVisible(false);
        Printer.setVisible(false);
        showPurUnit();
        unitDept.setVisible(true);
        jLabel8a.setVisible(true);
        jLabel8a1.setVisible(true);
        reqOwn.setVisible(true);
        jCheckBox1.setVisible(true);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        jCheckBox1.setVisible(false);
        unitSelect.setVisible(false);
        jLabel18a.setVisible(false);
        Unit.setVisible(false);
        Others.setVisible(false);
        CCTV.setVisible(true);
        Printer.setVisible(false);
        showPurCC();
        unitDept.setVisible(false);
        jLabel8a.setVisible(false);
        jLabel8a1.setVisible(false);
        reqOwn.setVisible(false);
        reqOwn.setText("CC");
        unitKey2.setText("");
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        jCheckBox1.setVisible(true);
        unitSelect.setVisible(false);
        jLabel18a.setVisible(false);
        Unit.setVisible(false);
        Others.setVisible(false);
        CCTV.setVisible(false);
        Printer.setVisible(true);
        showPurPR();
        unitDept.setVisible(true);
        jLabel8a.setVisible(true);
        jLabel8a1.setVisible(true);
        reqOwn.setVisible(true);
        unitKey2.setText("");
        reqOwn.setText("");
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void reqRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqRemoveActionPerformed
        cartDel();
    }//GEN-LAST:event_reqRemoveActionPerformed

    private void reqCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqCheckoutActionPerformed

        itemPurchase();
        unitKey2.setText("");
        reqOwn.setText("");
        /*
        if(pu.equals("pcPurchase")){
            INVmaincard.setVisible(true);
            Home.setVisible(false);
            HISmaincard.setVisible(false);
            Log.setVisible(false);
            this.dispose();
            AddHistory.setVisible(false);
            Transfer.setVisible(false);
            Transfer1.setVisible(false);
            Transfer2.setVisible(false);
            Transfer3.setVisible(false);
            Sys.setVisible(false);
            PCcard.setVisible(true);
            CCcard.setVisible(false);
            PRcard.setVisible(false);
            OTcard.setVisible(false);
            showPC();
        }
        else if(pu.equals("ccPurchase")){
            INVmaincard.setVisible(true);
            Home.setVisible(false);
            HISmaincard.setVisible(false);
            Log.setVisible(false);
            this.dispose();
            AddHistory.setVisible(false);
            Transfer.setVisible(false);
            Transfer1.setVisible(false);
            Transfer2.setVisible(false);
            Transfer3.setVisible(false);
            Sys.setVisible(false);
            PCcard.setVisible(false);
            CCcard.setVisible(true);
            PRcard.setVisible(false);
            OTcard.setVisible(false);
            showCC();
        }
        else if(pu.equals("prPurchase")){
            INVmaincard.setVisible(true);
            Home.setVisible(false);
            HISmaincard.setVisible(false);
            Log.setVisible(false);
            this.dispose();
            AddHistory.setVisible(false);
            Transfer.setVisible(false);
            Transfer1.setVisible(false);
            Transfer2.setVisible(false);
            Transfer3.setVisible(false);
            Sys.setVisible(false);
            PCcard.setVisible(false);
            CCcard.setVisible(false);
            PRcard.setVisible(true);
            OTcard.setVisible(false);
            showPR();
        }
        else if(pu.equals("Req")){
            INVmaincard.setVisible(false);
            Home.setVisible(true);
            HISmaincard.setVisible(false);
            Log.setVisible(false);
            this.dispose();
            AddHistory.setVisible(false);
            Done.setVisible(false);
            Transfer.setVisible(false);
            Transfer1.setVisible(false);
            Transfer2.setVisible(false);
            Transfer3.setVisible(false);
            Sys.setVisible(false);
            jRadioButton4.setEnabled(true);
            jRadioButton5.setEnabled(true);
            jRadioButton6.setEnabled(true);
            showHP();
            HOM.setBackground(Color.ORANGE);
            INV.setBackground(new Color(0,0,51, 61));
            HIS.setBackground(new Color(0,0,51, 61));
            LOG.setBackground(new Color(0,0,51, 61));
            SYST.setBackground(new Color(0,0,51, 61));
            LOGOUT.setBackground(new Color(0,0,51, 61));
        }
        else if(pu.equals("otPurchase")){
            INVmaincard.setVisible(true);
            Home.setVisible(false);
            HISmaincard.setVisible(false);
            Log.setVisible(false);
            this.dispose();
            AddHistory.setVisible(false);
            Transfer.setVisible(false);
            Transfer1.setVisible(false);
            Transfer2.setVisible(false);
            Transfer3.setVisible(false);
            Sys.setVisible(false);
            PCcard.setVisible(false);
            CCcard.setVisible(false);
            PRcard.setVisible(false);
            OTcard.setVisible(true);
            showOT();
        }
*/
    }//GEN-LAST:event_reqCheckoutActionPerformed

    private void reqCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqCancelActionPerformed
    Homepage h = new Homepage();
        if(pu.equals("pcPurchase")){
            h.setVisible(true);
            this.dispose();

        }
        else if(pu.equals("ccPurchase")){
            h.setVisible(true);
            this.dispose();
        }
        else if(pu.equals("prPurchase")){
            h.setVisible(true);
            this.dispose();
        }
        else if(pu.equals("Req")){
            h.setVisible(true);
            this.dispose();
        }
        else if(pu.equals("otPurchase")){
            h.setVisible(true);
            this.dispose();
        }
        try {
            con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;
            Statement st=con.createStatement();
            sql = "TRUNCATE TABLE dbo.invTEMP";
            st.execute(sql);
            sql1 = "TRUNCATE TABLE dbo.Cart";
            st.execute(sql1);
        }
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage());
            JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState());
        }
        

    }//GEN-LAST:event_reqCancelActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if(jCheckBox1.isSelected()){
            reqOwn.setEditable(false);
            reqBranch.setSelectedItem("ADMIN");
            unitDept.setSelectedItem("IT");
            reqOwn.setText("IT RESERVE");
            reqBranch.setEnabled(false);
            unitDept.setEnabled(false);
        }
        else{
            reqOwn.setEditable(true);
            reqBranch.setEnabled(true);
            unitDept.setEnabled(true);
        }

    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Purchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Purchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Purchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Purchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Purchase().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Adding;
    private javax.swing.JPanel CCTV;
    private javax.swing.JTable Cart;
    private javax.swing.JPanel Others;
    private javax.swing.JPanel Printer;
    private javax.swing.JPanel Request;
    private javax.swing.JPanel Unit;
    private javax.swing.JButton cctvAdd;
    private javax.swing.JTextField cctvField;
    private javax.swing.JSpinner cctvQty;
    private javax.swing.JTextField cctvSearch;
    private javax.swing.JTable cctvTbl;
    public javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel16a;
    private javax.swing.JLabel jLabel182;
    private javax.swing.JLabel jLabel18a;
    private javax.swing.JLabel jLabel1a;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54a;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel8a;
    private javax.swing.JLabel jLabel8a1;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel4;
    public javax.swing.JRadioButton jRadioButton1;
    public javax.swing.JRadioButton jRadioButton2;
    public javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton othersAdd;
    private javax.swing.JTextField othersField;
    private javax.swing.JTextField othersSearch;
    private javax.swing.JTable othersTbl;
    private javax.swing.JTextField pass;
    private javax.swing.JButton printerAdd;
    private javax.swing.JTextField printerField;
    private javax.swing.JTextField printerSearch;
    private javax.swing.JTable printerTbl;
    public javax.swing.JComboBox<String> reqBranch;
    private javax.swing.JButton reqCancel;
    private javax.swing.JButton reqCheckout;
    private javax.swing.JTextField reqOwn;
    private javax.swing.JButton reqRemove;
    private javax.swing.JTextField una;
    private javax.swing.JButton unitAdd;
    private javax.swing.JComboBox<String> unitDept;
    private javax.swing.JTextField unitHar;
    private javax.swing.JTextField unitKey;
    private javax.swing.JTextField unitKey2;
    private javax.swing.JTextField unitMon;
    private javax.swing.JTextField unitMot;
    private javax.swing.JTextField unitMou;
    private javax.swing.JTextField unitPro;
    private javax.swing.JTextField unitRam;
    private javax.swing.JTextField unitSearch;
    private javax.swing.JComboBox<String> unitSelect;
    private javax.swing.JTable unitTbl;
    private javax.swing.JTextField unitUPS;
    // End of variables declaration//GEN-END:variables
public void FilterHP( final JTable jTable,  final JTextField jtfFilter) {
    final TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(jTable.getModel());
    jTable.setRowSorter(rowSorter);
    jtfFilter.getDocument().addDocumentListener(new DocumentListener(){


        @Override
        public void insertUpdate(DocumentEvent e) {
            String text = jtfFilter.getText();

            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
                 jTable.convertRowIndexToModel(jTable.getSelectedRow());
            } else {
                rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
            }
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            String text = jtfFilter.getText();

            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
            } else {
                rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
            }

        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

    });
}
public void FilterPCtr( final JTable jTable,  final JTextField jtfFilter) {
    final TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(jTable.getModel());
    jTable.setRowSorter(rowSorter);
    jtfFilter.getDocument().addDocumentListener(new DocumentListener(){


        @Override
        public void insertUpdate(DocumentEvent e) {
            String text = jtfFilter.getText();

            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
                 jTable.convertRowIndexToModel(jTable.getSelectedRow());
            } else {
                rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
            }
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            String text = jtfFilter.getText();

            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
            } else {
                rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
            }
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

    });
}
public void FilterCCtr( final JTable jTable,  final JTextField jtfFilter) {
    final TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(jTable.getModel());
    jTable.setRowSorter(rowSorter);
    jtfFilter.getDocument().addDocumentListener(new DocumentListener(){


        @Override
        public void insertUpdate(DocumentEvent e) {
            String text = jtfFilter.getText();

            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
                 jTable.convertRowIndexToModel(jTable.getSelectedRow());
            } else {
                rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
            }
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            String text = jtfFilter.getText();

            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
            } else {
                rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
            }
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

    });
}
public void FilterPRtr( final JTable jTable,  final JTextField jtfFilter) {
    final TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(jTable.getModel());
    jTable.setRowSorter(rowSorter);
    jtfFilter.getDocument().addDocumentListener(new DocumentListener(){


        @Override
        public void insertUpdate(DocumentEvent e) {
            String text = jtfFilter.getText();

            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
                 jTable.convertRowIndexToModel(jTable.getSelectedRow());
            } else {
                rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
            }
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            String text = jtfFilter.getText();

            if (text.trim().length() == 0) {
                rowSorter.setRowFilter(null);
            } else {
                rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
            }
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

    });
}
    
public void cartAdd(){
        DateFormat dt = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        DateFormat tm = new SimpleDateFormat("HH:mm:ss");
        Date time = new Date();
        String Branch = reqBranch.getSelectedItem().toString();
        String Department = unitDept.getSelectedItem().toString();
        String dType = unitSelect.getSelectedItem().toString();
    if(jCheckBox1.isSelected())
        {purName = "IT RESERVE";}
         {purName = reqOwn.getText();
        }
         if(purName.equals("")){
        JOptionPane.showMessageDialog(null,"Owner Field cannot be empty!");
         }
         else{
        String s8 = "N/A";
if(jRadioButton1.isSelected()){
if(dType.equals("Unit")){
        String s1 = unitPro.getText();
        String s2 = unitMot.getText();
        String s3 = unitRam.getText();
        String s4 = unitHar.getText();
        String s5 = unitMon.getText();
        String s6 = unitKey.getText();
        String s7 = unitMou.getText();
        String s9 = unitUPS.getText();
        String qty = "1";
 try {
con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;         
Statement st=con.createStatement(); 
String sql10 = "INSERT INTO dbo.invTEMP(Branch,Dept,Owner,First,Second,Third,Fourth,Fifth,Sixth,Seventh,Eight,Ninth,Categ,Stat) VALUES ('"+Branch+"','"+Department+"','"+purName+"','"+s1+"','"+s2+"','"+s3+"','"+s4+"','"+s5+"','"+s6+"','"+s7+"','"+s8+"','"+s9+"','PC','PENDING')";         
st.execute(sql10);

String sq20 = "SELECT TOP 1 ID FROM dbo.invTEMP ORDER BY ID DESC";         
ResultSet rs2;
rs2 = st.executeQuery(sq20);             
if (rs2.next()) { 
id = rs2.getInt("ID");   
}

String sql1 ="INSERT INTO dbo.Cart (Cart_ID,Cart_Item, Cart_Name, Cart_Qty, Cart_Stat) Values ('"+id+"','Processor', '"+s1+"', '"+qty+"', 'PENDING')";         
st.execute(sql1);

String sql2 ="INSERT INTO dbo.Cart (Cart_ID,Cart_Item, Cart_Name, Cart_Qty, Cart_Stat) Values ('"+id+"','Motherboard', '"+s2+"', '"+qty+"', 'PENDING')";         
st.execute(sql2);

String sql3 ="INSERT INTO dbo.Cart (Cart_ID,Cart_Item, Cart_Name, Cart_Qty, Cart_Stat) Values ('"+id+"','Ram', '"+s3+"', '"+qty+"', 'PENDING')";         
st.execute(sql3);

String sql4 ="INSERT INTO dbo.Cart (Cart_ID,Cart_Item, Cart_Name, Cart_Qty, Cart_Stat) Values ('"+id+"','Harddrive', '"+s4+"', '"+qty+"', 'PENDING')";         
st.execute(sql4);

String sql5 ="INSERT INTO dbo.Cart (Cart_ID,Cart_Item, Cart_Name, Cart_Qty, Cart_Stat) Values ('"+id+"','Monitor', '"+s5+"', '"+qty+"', 'PENDING')";         
st.execute(sql5);

String sql6 ="INSERT INTO dbo.Cart (Cart_ID,Cart_Item, Cart_Name, Cart_Qty, Cart_Stat) Values ('"+id+"','Keyboard', '"+s6+"', '"+qty+"', 'PENDING')";         
st.execute(sql6);

String sql7 ="INSERT INTO dbo.Cart (Cart_ID,Cart_Item, Cart_Name, Cart_Qty, Cart_Stat) Values ('"+id+"','Mouse', '"+s7+"', '"+qty+"', 'PENDING')";
st.execute(sql7);

String sql9 ="INSERT INTO dbo.Cart (Cart_ID,Cart_Item, Cart_Name, Cart_Qty, Cart_Stat) Values ('"+id+"','UPS', '"+s9+"', '"+qty+"', 'PENDING')";         
st.execute(sql9);
//TEMPORARY INVENTORY
      }
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 }
 showCart();
}
else
{
String qty = "1";
String item = othersField.getText();
if(othersField.getText().equals("N/A")){JOptionPane.showMessageDialog(null,"Please select a device!");}
 try {
con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;         
Statement st=con.createStatement(); 
String sql10 = "INSERT INTO dbo.invTEMP(Branch,Dept,Owner,First,Second,Third,Fourth,Fifth,Sixth,Seventh,Eight,Ninth,Categ,Stat) VALUES ('"+Branch+"','"+Department+"','"+purName+"','"+dType+"','"+item+"','"+qty+"','"+s8+"','NEW','"+s8+"','"+s8+"','"+s8+"','"+s8+"','OT','PENDING')";         
st.execute(sql10);

String sq20 = "SELECT TOP 1 ID FROM dbo.invTEMP ORDER BY ID DESC";         
ResultSet rs2;
rs2 = st.executeQuery(sq20);             
if (rs2.next()) { 
id = rs2.getInt("ID");   
}

String sql1 ="INSERT INTO dbo.Cart (Cart_ID,Cart_Item, Cart_Name, Cart_Qty, Cart_Stat) Values ('"+id+"', '"+dType+"', '"+item+"', '"+qty+"', 'PENDING')";         
st.execute(sql1);
      }
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
}
showCart();
}
}



if(jRadioButton2.isSelected()){
String qty = "1";
String item = cctvField.getText();
un = una.getText();
pw = pass.getText();
cn = cctvQty.getValue().toString();
 try {
con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;         
Statement st=con.createStatement(); 
String sql10 = "INSERT INTO dbo.invTEMP(Branch,Dept,Owner,First,Second,Third,Fourth,Fifth,Sixth,Seventh,Eight,Ninth,Categ,Stat) VALUES ('"+Branch+"','N/A','N/A','"+item+"','"+cn+"','"+un+"','"+pw+"','"+s8+"','"+s8+"','"+s8+"','"+s8+"','"+s8+"','CC', 'PENDING')";         
st.execute(sql10);

String sq20 = "SELECT TOP 1 ID FROM dbo.invTEMP ORDER BY ID DESC";         
ResultSet rs2;
rs2 = st.executeQuery(sq20);             
if (rs2.next()) { 
id = rs2.getInt("ID");   
}

String sql1 ="INSERT INTO dbo.Cart (Cart_ID,Cart_Item, Cart_Name, Cart_Qty, Cart_Stat) Values ('"+id+"', 'CCTV Unit', '"+item+"', '"+qty+"', 'PENDING')";         
st.execute(sql1);
      }
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
}
showCart();
}



if(jRadioButton3.isSelected()){
String qty = "1";
String item = printerField.getText();
 try {
con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;         
Statement st=con.createStatement(); 
String sql10 = "INSERT INTO dbo.invTEMP(Branch,Dept,Owner,First,Second,Third,Fourth,Fifth,Sixth,Seventh,Eight,Ninth,Categ,Stat) VALUES ('"+Branch+"','"+Department+"','"+purName+"','"+dType+"','"+item+"','"+qty+"','"+s8+"','NEW','"+s8+"','"+s8+"','"+s8+"','"+s8+"','PR','PENDING')";         
st.execute(sql10);

String sq20 = "SELECT TOP 1 ID FROM dbo.invTEMP ORDER BY ID DESC";         
ResultSet rs2;
rs2 = st.executeQuery(sq20);             
if (rs2.next()) { 
id = rs2.getInt("ID");   
}

String sql1 ="INSERT INTO dbo.Cart (Cart_ID,Cart_Item, Cart_Name, Cart_Qty, Cart_Stat) Values ('"+id+"', 'Printer', '"+item+"', '"+qty+"', 'PENDING')";         
st.execute(sql1);
      }
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
}
showCart();
}}}
public void showCart(){
try {
con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;         
Statement st=con.createStatement();         
sql = "SELECT Cart_ID,Cart_Item,Cart_Name,Cart_Qty FROM dbo.Cart";         
ResultSet rs=st.executeQuery(sql); 
Cart.setModel(DbUtils.resultSetToTableModel(rs));
rs.close();
st.close();
}
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 }
}
public void cartDel(){
        int selectedRowIndex = Cart.getSelectedRow();
        String cartID = Cart.getValueAt(selectedRowIndex,0).toString();
        String cType = Cart.getValueAt(selectedRowIndex,1).toString();
        try{
Connection con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");              
Statement st12=con.createStatement();        
String sql ="SELECT * FROM dbo.invTEMP WHERE ID = '"+cartID+"'"; 
rs1=st12.executeQuery(sql); 
if(rs1.next()){
Categ = rs1.getString("Categ");
}
        }
catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLExceptionSelect: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 }
if(Categ.equals("PC")){    
    if(cType.equals("Processor")){
    cName = "First";
    }
    if(cType.equals("Motherboard")){
    cName = "Second";
    }
    if(cType.equals("Ram")){
    cName = "Third";
    }
    if(cType.equals("Harddrive")){
    cName = "Fourth";
    }
    if(cType.equals("Monitor")){
    cName = "Fifth";
    }
    if(cType.equals("Keyboard")){
    cName = "Sixth";
    }
    if(cType.equals("Mouse")){
    cName = "Seventh";
    }
    if(cType.equals("UPS")){
    cName = "Ninth";
    }
Object[] options = { "OK", "CANCEL" };
int n = JOptionPane.showOptionDialog(null, "Are you sure you want to proceed?", "Delete",
JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
null, options, options[0]);
if(n == JOptionPane.OK_OPTION){ 
    try{
Connection con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");              
Statement st1=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);      
 String sql ="UPDATE dbo.invTEMP SET "+cName+" = 'N/A' WHERE ID = '"+cartID+"'"; 
st1.execute(sql);
 String sql1 ="DELETE FROM dbo.Cart WHERE Cart_Item= '"+cType+"' AND Cart_ID = '"+cartID+"'"; 
st1.execute(sql1);
}
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLExceptionUpDel: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 }
JOptionPane.showMessageDialog(null,"Item Removed!"); 
}
}
else{
Object[] options = { "OK", "CANCEL" };
int n = JOptionPane.showOptionDialog(null, "Are you sure you want to proceed?", "Delete",
JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
null, options, options[0]);
if(n == JOptionPane.OK_OPTION){ 
    try{
Connection con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");              
Statement st1=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);      
 String sql ="DELETE FROM dbo.invTEMP WHERE ID = '"+cartID+"'"; 
st1.execute(sql);
 String sql1 ="DELETE FROM dbo.Cart WHERE Cart_Item= '"+cType+"' AND Cart_ID = '"+cartID+"'"; 
st1.execute(sql1);
}
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLExceptionUpDel: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 }
JOptionPane.showMessageDialog(null,"Item Removed!"); 
}
}
showCart();
}
public void itemPurchase(){
        DateFormat dt = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        DateFormat tm = new SimpleDateFormat("HH:mm:ss");
        Date time = new Date();
        String Branch = reqBranch.getSelectedItem().toString();
        String Department = unitDept.getSelectedItem().toString();
        String dType = unitSelect.getSelectedItem().toString();
        String Price = unitKey2.getText();
        if(jCheckBox1.isSelected())
        {purName = "IT RESERVE";}
        else
        {purName = reqOwn.getText();}
        String s8 = "N/A";
if(unitKey2.equals("")){
        JOptionPane.showMessageDialog(null,"Price Field cannot be empty!");
    }
else{
try{
Connection con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");              
Statement st12=con.createStatement();        
String sql ="SELECT TOP 1 ID FROM dbo.invTEMP ORDER BY ID DESC "; 
rs1=st12.executeQuery(sql); 
if(rs1.next()){
cnt = rs1.getInt("ID");
}

for(int x = 1;x<=cnt;x++){
String sql1 ="SELECT Categ FROM dbo.invTEMP WHERE ID = '"+x+"'"; 
rs=st12.executeQuery(sql1); 
if(rs.next()){
Categ = rs.getString("Categ");
}

if(Categ.equals("PC")){
    if(othersField.getText().equals("N/A")){JOptionPane.showMessageDialog(null,"Please select a device!");}
    String sql14 ="SELECT * FROM dbo.invTEMP,dbo.Cart WHERE ID = '"+x+"' AND Cart_ID = '"+x+"'"; 
    rs=st12.executeQuery(sql14); 
    if(rs.next()){
    br = rs.getString("Branch");
    dp = rs.getString("Dept");
    ow = rs.getString("Owner");
    pr = rs.getString("First");
    mb = rs.getString("Second");
    rm = rs.getString("Third");
    hd = rs.getString("Fourth");
    up = rs.getString("Fifth");
    kb = rs.getString("Sixth");
    ms = rs.getString("Seventh");
    re = rs.getString("Eight");
    mn = rs.getString("Ninth");
    ty = rs.getString("Cart_Item");
    na = rs.getString("Cart_Name");
    //JOptionPane.showMessageDialog(null,Categ+br+dp+ow+pr+mb+rm+hd+up+kb+ms+re+mn+ty+na); 
    }
    String sql43 ="INSERT INTO dbo.Inv(Categ,Branch,Owner,Dept,Status) VALUES ('"+Categ+"','"+br+"','"+ow+"','"+dp+"','PENDING')";        
    st12.execute(sql43);
    
    String sql45 = "SELECT TOP 1 Dev_ID FROM dbo.Inv ORDER BY Dev_ID DESC";         
    ResultSet rs3;
    rs3 = st12.executeQuery(sql45);             
    if (rs3.next()) { 
    dID = rs3.getInt("Dev_ID");   
    }
    String sql46 ="INSERT INTO dbo.invPC(Branch,Dept,Owner,Proce,MBoard,Ram,HDD,UPS,KeyB,Mouse,Rem,Moni,ID,Categ,Stat) VALUES ('"+br+"','"+dp+"','"+ow+"','"+pr+"','"+mb+"','"+rm+"','"+hd+"','"+up+"','"+kb+"','"+ms+"','"+rm+"','"+mn+"','"+dID+"','PC','PENDING')";        
    st12.execute(sql46);
    String newsql = "INSERT INTO dbo.Logs (Action,Categ,Item,Date,Time) VALUES ('Item Requested', '"+Categ+"', '"+br+"-"+dp+"-"+ow+"','"+dt.format(date)+"','"+tm.format(time)+"')";
    st12.execute(newsql);
    String newsql1 = "INSERT INTO dbo.History (Branch,Action,Categ,Name,Perf,ITEM_ID,SDate,EDate,STime,ETime,Price,Remarks) VALUES ('"+br+"','Requested', '"+Categ+"','"+dp+"-"+ow+"','IT DEPARTMENT','"+dID+"','"+dt.format(date)+"','"+dt.format(date)+"','"+tm.format(time)+"','"+tm.format(time)+"','"+Price+"','PC Unit Requested')";
    st12.execute(newsql1);
     String newsql4 = "INSERT INTO dbo.History (Branch,Action,Categ,Name,Perf,ITEM_ID,SDate,EDate,STime,ETime,Price,Remarks) VALUES ('"+br+"','Waiting for Item', '"+Categ+"','"+dp+"-"+ow+"','IT DEPARTMENT','"+dID+"','"+dt.format(date)+"','"+dt.format(date)+"','"+tm.format(time)+"','"+tm.format(time)+"','"+Price+"','PC Unit Requested')";
    st12.execute(newsql4);
    
    String sql4 = "SELECT TOP 1 HIS_ID FROM dbo.History ORDER BY HIS_ID DESC";         
    ResultSet rs2;
    rs2 = st12.executeQuery(sql4);             
    if (rs2.next()) { 
    tempid = rs2.getInt("HIS_ID");   
    }
    String sql44="INSERT INTO dbo.Pur(Dev_ID, Pur_Item, Pur_Name, Pur_Stat, Pur_ID) Values ('"+dID+"', 'Unit', 'N/A', 'PENDING', '"+tempid+"' )";         
     st12.execute(sql44);

     JOptionPane.showMessageDialog(null,"Item Requested!");
}
else
{
 String sql14 ="SELECT * FROM dbo.invTEMP,dbo.Cart WHERE ID = '"+x+"' AND Cart_ID = '"+x+"'"; 
    rs=st12.executeQuery(sql14); 
    if(rs.next()){
    br = rs.getString("Branch");
    dp = rs.getString("Dept");
    ow = rs.getString("Owner");
    pr = rs.getString("First");
    mb = rs.getString("Second");
    rm = rs.getString("Third");
    hd = rs.getString("Fourth");
    up = rs.getString("Fifth");
    kb = rs.getString("Sixth");
    ms = rs.getString("Seventh");
    re = rs.getString("Eight");
    mn = rs.getString("Ninth");
    ty = rs.getString("Cart_Item");
    na = rs.getString("Cart_Name");
    qt = rs.getString("Cart_Qty");
    cn = rs.getString("Cart_Qty");
    }
    String sql43 ="INSERT INTO dbo.Inv(Categ,Branch,Owner,Dept,Status) VALUES ('"+Categ+"','"+br+"','"+ow+"','"+dp+"','PENDING')";        
    st12.execute(sql43);
    
    String sql45 = "SELECT TOP 1 Dev_ID FROM dbo.Inv ORDER BY Dev_ID DESC";         
    ResultSet rs3;
    rs3 = st12.executeQuery(sql45);             
    if (rs3.next()) { 
    dID = rs3.getInt("Dev_ID");   
    }
    
    if(Categ.equals("OT")){
    word = "INSERT INTO dbo.invOT(Branch,Dept,Owner,Categ,Device,Name,Qty,Rem,ID,Qlt,Stat) VALUES ('"+br+"','"+dp+"','"+ow+"','"+Categ+"','"+ty+"','"+na+"','"+qt+"','N/A','"+dID+"','NEW','PENDING')";
    st12.execute(word);
     String newsql = "INSERT INTO dbo.Logs (Action,Categ,Item,Date,Time) VALUES ('Item Requested', '"+Categ+"', '"+br+"-"+dp+"-"+ow+"','"+dt.format(date)+"','"+tm.format(time)+"')";
    st12.execute(newsql);
    String newsql1 = "INSERT INTO dbo.History (Branch,Action,Categ,Name,Perf,ITEM_ID,SDate,EDate,STime,ETime,Price,Remarks) VALUES ('"+br+"','Requested', '"+Categ+"','"+dp+"-"+ow+"','IT DEPARTMENT','"+dID+"','"+dt.format(date)+"','"+dt.format(date)+"','"+tm.format(time)+"','"+tm.format(time)+"','"+Price+"','"+ty+" Requested')";
    st12.execute(newsql1);
     String newsql4 = "INSERT INTO dbo.History (Branch,Action,Categ,Name,Perf,ITEM_ID,SDate,EDate,STime,ETime,Price,Remarks) VALUES ('"+br+"','Waiting for Item','"+Categ+"','"+dp+"-"+ow+"','IT DEPARTMENT','"+dID+"','"+dt.format(date)+"','"+dt.format(date)+"','"+tm.format(time)+"','"+tm.format(time)+"','"+Price+"','"+ty+" Requested')";
    st12.execute(newsql4);
    String sql4 = "SELECT TOP 1 HIS_ID FROM dbo.History ORDER BY HIS_ID DESC";         
    ResultSet rs2;
    rs2 = st12.executeQuery(sql4);             
    if (rs2.next()) { 
    tempid = rs2.getInt("HIS_ID");   
    }
    String sql44="INSERT INTO dbo.Pur(Dev_ID, Pur_Item, Pur_Name, Pur_Stat, Pur_ID) Values ('"+dID+"', '"+ty+"', '"+na+"', 'PENDING', '"+tempid+"' )";         
     st12.executeUpdate(sql44);
    }
    
    
    if(Categ.equals("PR")){
    word = "INSERT INTO dbo.invPR(Branch,Manu,Owner,Dept,Rem,ID,Stat,Categ) VALUES ('"+br+"','"+na+"','"+ow+"','"+dp+"','N/A','"+dID+"','PENDING','"+Categ+"')";
        st12.execute(word);
     String newsql = "INSERT INTO dbo.Logs (Action,Categ,Item,Date,Time) VALUES ('Item Requested', '"+Categ+"', '"+br+"-"+dp+"-"+ow+"','"+dt.format(date)+"','"+tm.format(time)+"')";
    st12.execute(newsql);
    String newsql1 = "INSERT INTO dbo.History (Branch,Action,Categ,Name,Perf,ITEM_ID,SDate,EDate,STime,ETime,Price,Remarks) VALUES ('"+br+"','Requested', '"+Categ+"','"+dp+"-"+ow+"','IT DEPARTMENT','"+dID+"','"+dt.format(date)+"','"+dt.format(date)+"','"+tm.format(time)+"','"+tm.format(time)+"','"+Price+"','Printer Requested')";
    st12.execute(newsql1);
     String newsql4 = "INSERT INTO dbo.History (Branch,Action,Categ,Name,Perf,ITEM_ID,SDate,EDate,STime,ETime,Price,Remarks) VALUES ('"+br+"','Waiting for Item','"+Categ+"','"+dp+"-"+ow+"','IT DEPARTMENT','"+dID+"','"+dt.format(date)+"','"+dt.format(date)+"','"+tm.format(time)+"','"+tm.format(time)+"','"+Price+"','Printer Requested')";
    st12.execute(newsql4);
    String sql4 = "SELECT TOP 1 HIS_ID FROM dbo.History ORDER BY HIS_ID DESC";         
    ResultSet rs2;
    rs2 = st12.executeQuery(sql4);             
    if (rs2.next()) { 
    tempid = rs2.getInt("HIS_ID");   
    }
    String sql44="INSERT INTO dbo.Pur(Dev_ID, Pur_Item, Pur_Name, Pur_Stat, Pur_ID) Values ('"+dID+"', '"+ty+"', '"+na+"', 'PENDING', '"+tempid+"' )";         
     st12.executeUpdate(sql44);
    }    
    
    
    if(Categ.equals("CC")){
    word = "INSERT INTO dbo.invCC(Branch,SP,Cnum,Camera,DVR,HDD,uN,pW,ID,Stat,Categ) VALUES ('"+br+"','"+pr+"',"+mb+",'WORKING','N/A','N/A','"+rm+"','"+hd+"','"+dID+"','PENDING','"+Categ+"')";
     st12.execute(word);
     String newsql = "INSERT INTO dbo.Logs (Action,Categ,Item,Date,Time) VALUES ('Item Requested', '"+Categ+"', '"+br+"-"+dp+"-"+ow+"','"+dt.format(date)+"','"+tm.format(time)+"')";
    st12.execute(newsql);
    String newsql1 = "INSERT INTO dbo.History (Branch,Action,Categ,Name,Perf,ITEM_ID,SDate,EDate,STime,ETime,Price,Remarks) VALUES ('"+br+"','Requested', '"+Categ+"','"+dp+"-"+ow+"','IT DEPARTMENT','"+dID+"','"+dt.format(date)+"','"+dt.format(date)+"','"+tm.format(time)+"','"+tm.format(time)+"','"+Price+"','CCTV Requested')";
    st12.execute(newsql1);
     String newsql4 = "INSERT INTO dbo.History (Branch,Action,Categ,Name,Perf,ITEM_ID,SDate,EDate,STime,ETime,Price,Remarks) VALUES ('"+br+"','Waiting for Item','"+Categ+"','"+dp+"-"+ow+"','IT DEPARTMENT','"+dID+"','"+dt.format(date)+"','"+dt.format(date)+"','"+tm.format(time)+"','"+tm.format(time)+"','"+Price+"','CCTV Requested')";
    st12.execute(newsql4);
    String sql4 = "SELECT TOP 1 HIS_ID FROM dbo.History ORDER BY HIS_ID DESC";         
    ResultSet rs2;
    rs2 = st12.executeQuery(sql4);             
    if (rs2.next()) { 
    tempid = rs2.getInt("HIS_ID");   
    }
    String sql44="INSERT INTO dbo.Pur(Dev_ID, Pur_Item, Pur_Name, Pur_Stat, Pur_ID) Values ('"+dID+"', '"+ty+"', '"+na+"', 'PENDING', '"+tempid+"' )";         
     st12.executeUpdate(sql44);
    }

   
   

     JOptionPane.showMessageDialog(null,"Item Requested!");
}
try{
    String newsql = "DELETE FROM dbo.invTEMP WHERE ID = '"+x+"'";
    st12.execute(newsql);
}
catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLExceptionSelect: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 } 
}
        }
catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLExceptionSelect: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 } 
}
        try {
            con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;
            Statement st=con.createStatement();
            sql = "TRUNCATE TABLE dbo.invTEMP";
            st.execute(sql);
            sql1 = "TRUNCATE TABLE dbo.Cart";
            st.execute(sql1);
        }
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage());
            JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState());
        }
Homepage h = new Homepage();
h.setVisible(true);
this.dispose();

}


public void showDepPur(){
unitDept.removeAllItems();
String Branch = reqBranch.getSelectedItem().toString();
try {
con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;         
Statement st=con.createStatement();         
sql = "SELECT Dept FROM dbo.Departments WHERE Branch = '"+Branch+"' ORDER by Branch";         
ResultSet rs=st.executeQuery(sql); 
while(rs.next()){
String Dept = rs.getString("Dept");
unitDept.addItem(Dept);
}
rs.close();
st.close();
      }
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 }
}
public void showPurUnit(){   
{
try {
con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;         
Statement st=con.createStatement();         
sql = "SELECT Branch, Dept as Department,Owner as CurrentUser,Proce as Processor, MBoard as Motherboard, Ram as Memory,HDD as HardDisk,Moni as Monitor,KeyB as Keyboard, Mouse,UPS, ID FROM dbo.invPC ORDER by ID DESC";         
ResultSet rs=st.executeQuery(sql); 
unitTbl.setModel(DbUtils.resultSetToTableModel(rs));
rs.close();
st.close();
      }
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 }
FilterPCtr(unitTbl,unitSearch);
}
}
public void showPurOT(){
    String Parts = unitSelect.getSelectedItem().toString();
    if(Parts.equals("Processor")){
    Parts1 = "Proce AS Processor";
    }
    if(Parts.equals("Motherboard")){
    Parts1 = "MBoard AS Motherboard";
    }
    if(Parts.equals("Harddrive")){
    Parts1 = "HDD AS Harddrive";
    }
    if(Parts.equals("RAM")){
    Parts1 = "Ram ";
    }
    if(Parts.equals("Monitor")){
    Parts1 = "Moni AS Monitor";
    }
    if(Parts.equals("UPS")){
    Parts1 = "UPS";
    }
    if(Parts.equals("Mouse")){
    Parts1 = "Mouse";
    }
    if(Parts.equals("Keyboard")){
    Parts1 = "KeyB AS Keyboard";
    }
   try {
con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;         
Statement st=con.createStatement();         
sql = "SELECT Branch, Dept as Department,Owner as CurrentUser,"+Parts1+", ID FROM dbo.invPC WHERE "+Parts1+" != 'FOR SHIPPING' OR "+Parts1+" != 'FOR REPAIR' OR "+Parts1+" != 'N/A' ORDER by ID DESC";         
ResultSet rs=st.executeQuery(sql); 
othersTbl.setModel(DbUtils.resultSetToTableModel(rs));
rs.close();
st.close();
      }
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 }
 FilterPCtr(othersTbl,othersSearch);
}  
public void showPurCC(){   
{
try {
con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;         
Statement st=con.createStatement();         
sql = "SELECT Branch, SP as ServiceProvider,CNum as Quantity, Camera, DVR, HDD, uN as Username,pW as Password, ID FROM dbo.invCC WHERE Stat = 'WORKING' ORDER by ID DESC";         
ResultSet rs=st.executeQuery(sql); 
cctvTbl.setModel(DbUtils.resultSetToTableModel(rs));
rs.close();
st.close();
      }
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 }
FilterPCtr(cctvTbl,cctvSearch);
}
}
public void showPurPR(){   
   try {
con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;         
Statement st=con.createStatement();         
sql = "SELECT Branch, Dept AS Department, Manu AS Manufacturer, Owner as Name, ID FROM dbo.invPR WHERE Stat = 'WORKING' ORDER by ID DESC";         
ResultSet rs=st.executeQuery(sql); 
printerTbl.setModel(DbUtils.resultSetToTableModel(rs));
rs.close();
st.close();
      }
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 }
FilterPCtr(printerTbl,printerSearch);
}
public void pcSetpr(){
        int selectedRowIndex = unitTbl.getSelectedRow();
        //compBran.setText(transTbl.getValueAt(selectedRowIndex,0).toString());
        //compDept.setText(transTbl.getValueAt(selectedRowIndex,1).toString());
        //compName.setText(transTbl.getValueAt(selectedRowIndex,2).toString());
        unitPro.setText(unitTbl.getValueAt(selectedRowIndex,3).toString());
        unitMot.setText(unitTbl.getValueAt(selectedRowIndex,4).toString());
        unitRam.setText(unitTbl.getValueAt(selectedRowIndex,5).toString());
        unitHar.setText(unitTbl.getValueAt(selectedRowIndex,6).toString());
        unitMon.setText(unitTbl.getValueAt(selectedRowIndex,7).toString());
        unitKey.setText(unitTbl.getValueAt(selectedRowIndex,8).toString());
        unitMou.setText(unitTbl.getValueAt(selectedRowIndex,9).toString());
        unitUPS.setText(unitTbl.getValueAt(selectedRowIndex,10).toString());

}
public void otSetpr(){
        int selectedRowIndex = othersTbl.getSelectedRow();
        othersField.setText(othersTbl.getValueAt(selectedRowIndex,3).toString());
}
public void ccSetpr(){
        int selectedRowIndex = cctvTbl.getSelectedRow();
        cctvField.setText(cctvTbl.getValueAt(selectedRowIndex,1).toString());
}
public void pcSortpr(){   
String Parts = unitSelect.getSelectedItem().toString();   
    if(Parts.equals("Unit")){
    showPurUnit();
    }
    else
    {
    if(Parts.equals("Processor")){
    Parts1 = "Proce AS Processor";
    }
    if(Parts.equals("Motherboard")){
    Parts1 = "MBoard AS Motherboard";
    }
    if(Parts.equals("Harddrive")){
    Parts1 = "HDD AS Harddrive";
    }
    if(Parts.equals("RAM")){
    Parts1 = "Ram ";
    }
    if(Parts.equals("Monitor")){
    Parts1 = "Moni AS Monitor";
    }
    if(Parts.equals("UPS")){
    Parts1 = "UPS";
    }
    if(Parts.equals("Mouse")){
    Parts1 = "Mouse";
    }
    if(Parts.equals("Keyboard")){
    Parts1 = "KeyB AS Keyboard";
    }
    try {
con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Newnemar", "sa", "123");;         
Statement st=con.createStatement();         
sql = "SELECT Branch, Dept as Department,Owner as CurrentUser,"+Parts1+", ID FROM dbo.invPC WHERE Stat = 'WORKING' ORDER by Branch";         
ResultSet rs=st.executeQuery(sql); 
othersTbl.setModel(DbUtils.resultSetToTableModel(rs));
rs.close();
st.close();
      }
 catch (SQLException ex) {    
JOptionPane.showMessageDialog(null,"SQLException: " + ex.getMessage()); 
JOptionPane.showMessageDialog(null,"SQLState: " + ex.getSQLState()); 
 }
 FilterPCtr(othersTbl,othersSearch);   
}  
}
public void prSetpr(){
        int selectedRowIndex = printerTbl.getSelectedRow();
        printerField.setText(printerTbl.getValueAt(selectedRowIndex,2).toString());
}
}
